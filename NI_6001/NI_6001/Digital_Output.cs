//------------------------------------------------------------------------------
// <autogenerated>
//    This code was generated by Measurement Studio.
//    Runtime Version: 15.0.0.49153
//
//    Changes to this file may cause incorrect behavior and will be lost if
//    the code is regenerated.
// <autogenerated>
//------------------------------------------------------------------------------

using NationalInstruments;
using NationalInstruments.DAQmx;
using NationalInstruments.DAQmx.ComponentModel;
using System;
using System.ComponentModel;
using System.Threading;


namespace NI_6001
{
    /// <summary>
    /// Defines a DAQ component that performs finite output data acquisition
    /// operations.
    /// </summary>
    [System.ComponentModel.DesignerCategory("Code")]
    [ToolboxItem(false)]
    [TemplateData("WriteDig1DU32", MxbFile="Digital_Output.mxb")]
    partial class Digital_OutputComponent : FiniteOutputDaqComponent<DigitalMultiChannelWriter, uint[]>
    {
        /// <summary>
        /// Initializes a new instance of the component.
        /// </summary>
        public Digital_OutputComponent()
        {
            Initialize();
        }
        
        /// <summary>
        /// Initializes a new instance of the component with the specified container.
        /// </summary>
        public Digital_OutputComponent(IContainer container)
            : this()
        {
            if (container != null)
                container.Add(this);
        }
        
        /// <summary>
        /// Creates the underlying DAQ task of the component.
        /// </summary><returns>
        /// A DAQ task that represents the DAQ task of the component.
        /// </returns>
        protected override Task CreateTask()
        {
            return new Digital_Output();
        }


        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        public long NumberOfChannelsToWrite
        {
            get
            {
                return 1;
            }
        }

        /// <summary>
        /// Creates the underlying DAQ writer of the component.
        /// </summary><returns>
        /// The DAQ writer that performs the output data acquisition operations.
        /// </returns>
        protected override DigitalMultiChannelWriter CreateWriter()
        {
            return new DigitalMultiChannelWriter(Task.Stream);
        }

        /// <summary>
        /// Performs a synchronous write operation.
        /// </summary><param name="data">
        /// The data to write to the DAQ task.
        /// </param>
        protected override void WriteFinite(uint[] data)
        {
            Writer.WriteSingleSamplePort(false, data);
        }

        /// <summary>
        /// Begins an asynchronous write operation.
        /// </summary><param name="data">
        /// The data to write to the DAQ task.
        /// </param><param name="callback">
        /// An asynchronous callback that is called when the write is completed.
        /// </param><param name="state">
        /// An object that distinguishes this asynchronous write request from other
        /// requests.
        /// </param>
        protected override void BeginWriteFinite(uint[] data, AsyncCallback callback, object state)
        {
            Writer.BeginWriteSingleSamplePort(false, data, callback, state);
        }

        /// <summary>
        /// Ends an asynchronous write operation.
        /// </summary><param name="result">
        /// An IAsyncResult that represents an asynchronous call started by
        /// BeginWriteFinite.
        /// </param>
        protected override void EndWriteFinite(IAsyncResult result)
        {
            try
            {
                Writer.EndWrite(result);
            }

            #region Debugger Exception Warnings
            catch (DaqException ex)
            {
                // If you Dispose the component while an asynchronous DAQ operation
                // is still running, the component may already be disposed or may be in the
                // process of disposing when this method is called.  Depending on timing, this situation
                // will result in one of the three errors below.  This is expected behavior.
                //
                // DaqExceptions are processed by the caller of this method in the
                // NationalInstruments.DAQmx.ComponentModel class library.  However, by default,
                // the Visual Studio debugger intercepts these exceptions and breaks
                // the debugger when they occur.
                //
                // Because these exceptions do not represent errors, they are caught and safely discarded
                // here.
                if (ex.Error != -200088 && ex.Error != -88709 && ex.Error != -88710)
                    throw;
            }
            #endregion

        }
    }

    #region Timing Compatibility
    partial class Digital_OutputComponent
    {
        /// <summary>
        /// This member supports compatibility with code that is generated with a
        /// different timing mode and is not intended to be used directly from your code.
        /// </summary>
        [Browsable(false)]
        [DesignerSerializationVisibility(DesignerSerializationVisibility.Hidden)]
        [EditorBrowsable(EditorBrowsableState.Never)]
        [Obsolete("This member supports compatibility with code that is generated with a different timing mode and is not intended to be used directly from your code.")]
        public event EventHandler<Digital_OutputComponentGenerateDataEventArgs> GenerateData
        {
            add
            {
                throw new NotSupportedException("This member supports compatibility with code that is generated with a different timing mode and is not intended to be used directly from your code.");
            }

            remove
            {
                throw new NotSupportedException("This member supports compatibility with code that is generated with a different timing mode and is not intended to be used directly from your code.");
            }
        }
    }
    
    /// <summary>
    /// This type supports compatibility with code that is generated with a
    /// different timing mode and is not intended to be used directly from your code.
    /// </summary>
    [EditorBrowsable(EditorBrowsableState.Never)]
    public class Digital_OutputComponentGenerateDataEventArgs : GenerateDataEventArgs<object>
    {
        /// <summary>
        /// This member supports compatibility with code that is generated with a
        /// different timing mode and is not intended to be used directly from your code.
        /// </summary>
        public Digital_OutputComponentGenerateDataEventArgs(long numberOfChannelsToWrite)
            : base(numberOfChannelsToWrite)
        {
            throw new NotSupportedException("This member supports compatibility with code that is generated with a different timing mode and is not intended to be used directly from your code.");
        }
    }
    #endregion




      
    public class Digital_Output : Task
    {
        public Digital_Output()
        {
            Configure();
        }
        
        public virtual void Configure()
        {
            // This code was generated by Measurement Studio.  Changes to this 
            // file may cause incorrect behavior and will be lost if the code 
            // is regenerated.
            
                DOChannel ch = DOChannels.CreateChannel("Dev1/port0", "DigitalOut", ChannelLineGrouping.OneChannelForAllLines);
                

        }
    }


}
